{"version":3,"sources":["api/coinMarket.tsx","components/crypto/Crypto.tsx","components/loading/Loading.tsx","App.tsx","index.tsx"],"names":["axios","create","baseURL","Crypto","props","renderedProps","results","map","result","Table","Row","Cell","rank","src","logo_url","alt","name","className","symbol","value","price","displayType","thousandSeparator","decimalScale","prefix","circulating_supply","id","singleLine","Header","HeaderCell","Body","Loading","text","Dimmer","active","inverted","Loader","size","href","target","App","useState","loading","setLoading","setResults","useEffect","getCurrencies","setInterval","a","coinMarket","get","params","key","page","sort","status","interval","data","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,8B,iCCmBEC,EAAS,SAACC,GACrB,IAAMC,EAAgBD,EAAME,QAAQC,KAAI,SAACC,GACvC,OACE,eAACC,EAAA,EAAMC,IAAP,WACE,cAACD,EAAA,EAAME,KAAP,UAAaH,EAAOI,OACpB,eAACH,EAAA,EAAME,KAAP,WACE,qBAAKE,IAAKL,EAAOM,SAAUC,IAAKP,EAAOQ,OADzC,IACmDR,EAAOQ,KAAM,IAC9D,sBAAMC,UAAU,cAAhB,SAA+BT,EAAOU,YAExC,cAACT,EAAA,EAAME,KAAP,UACE,cAAC,IAAD,CACEQ,MAAOX,EAAOY,MACdC,YAAa,OACbC,mBAAmB,EACnBC,aAAc,EACdC,OAAQ,QAGZ,eAACf,EAAA,EAAME,KAAP,WACGH,EAAOiB,mBADV,IAC+BjB,EAAOU,YAhBxBV,EAAOkB,OAsB3B,OACE,qBAAKT,UAAU,cAAf,SACE,eAACR,EAAA,EAAD,CAAOkB,YAAU,EAAjB,UACE,cAAClB,EAAA,EAAMmB,OAAP,UACE,eAACnB,EAAA,EAAMC,IAAP,WACE,cAACD,EAAA,EAAMoB,WAAP,gBACA,cAACpB,EAAA,EAAMoB,WAAP,mBACA,cAACpB,EAAA,EAAMoB,WAAP,oBACA,cAACpB,EAAA,EAAMoB,WAAP,sCAIJ,cAACpB,EAAA,EAAMqB,KAAP,UAAazB,U,2BCpDR0B,EAAU,SAACC,GACtB,OACE,8BACE,cAACC,EAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,EAAvB,SACE,cAACC,EAAA,EAAD,CAAQC,KAAK,UAAUF,UAAQ,EAA/B,SACE,mBAAGG,KAAK,qBAAqBC,OAAO,OAApC,wECgCKC,EArCH,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEcF,mBAAS,IAFvB,mBAETnC,EAFS,KAEAsC,EAFA,KAIhBC,qBAAU,WACRC,IACAC,aAAY,kBAAMD,MAAiB,OAClC,IAGH,IAAMA,EAAa,uCAAG,8BAAAE,EAAA,sEACGC,EAAWC,IAAI,iCAAkC,CACtEC,OAAQ,CACNC,IAAK,mCACLC,KAAM,EACNC,KAAM,OACNC,OAAQ,SACRC,SAAU,QAPM,gBACZC,EADY,EACZA,KASRd,GAAW,GACXC,EAAWa,GAXS,2CAAH,qDAcnB,OACE,8BACGf,EACC,cAAC,EAAD,CAASV,KAAK,YAEd,cAAC0B,EAAA,EAAD,UACE,cAAC,EAAD,CAAQpD,QAASA,S,OC9B3BqD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9f15e210.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://api.nomics.com/v1\",\n});\n","import React from \"react\";\nimport \"./Crypto.css\";\nimport NumberFormat from \"react-number-format\";\nimport { Table } from \"semantic-ui-react\";\n\ninterface ICryptoList {\n  results: ICryptoItem[];\n}\n\ninterface ICryptoItem {\n  currency: string;\n  id: string;\n  status: string;\n  price: number;\n  symbol: string;\n  circulating_supply: string;\n  max_supply: number;\n  name: string;\n  logo_url: string;\n  rank: number;\n}\n\nexport const Crypto = (props: ICryptoList) => {\n  const renderedProps = props.results.map((result) => {\n    return (\n      <Table.Row key={result.id}>\n        <Table.Cell>{result.rank}</Table.Cell>\n        <Table.Cell>\n          <img src={result.logo_url} alt={result.name} /> {result.name}{\" \"}\n          <span className=\"symbolColor\">{result.symbol}</span>\n        </Table.Cell>\n        <Table.Cell>\n          <NumberFormat\n            value={result.price}\n            displayType={\"text\"}\n            thousandSeparator={true}\n            decimalScale={2}\n            prefix={\"$\"}\n          />\n        </Table.Cell>\n        <Table.Cell>\n          {result.circulating_supply} {result.symbol}\n        </Table.Cell>\n      </Table.Row>\n    );\n  });\n\n  return (\n    <div className=\"tableStyles\">\n      <Table singleLine>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>#</Table.HeaderCell>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Price</Table.HeaderCell>\n            <Table.HeaderCell>Circulating Supply</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>{renderedProps}</Table.Body>\n      </Table>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\ninterface LoadingProps {\n  text: string;\n}\n\nexport const Loading = (text: LoadingProps) => {\n  return (\n    <div>\n      <Dimmer active inverted>\n        <Loader size=\"massive\" inverted>\n          <a href=\"https://nomics.com\" target=\"none\">\n            Crypto Market Cap & Pricing Data Provided By Nomics\n          </a>\n        </Loader>\n      </Dimmer>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport coinMarket from \"./api/coinMarket\";\nimport { Crypto } from \"./components/crypto/Crypto\";\nimport { Container } from \"semantic-ui-react\";\nimport { Loading } from \"./components/loading/Loading\";\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    getCurrencies();\n    setInterval(() => getCurrencies(), 10000);\n  }, []);\n\n  // getCurrencies gets a list of currencies from the API, max 50 per page\n  const getCurrencies = async () => {\n    const { data } = await coinMarket.get(\"/currencies/ticker?per-page=50\", {\n      params: {\n        key: \"a6c92c3d2995d937afc4c127533785a2\",\n        page: 1,\n        sort: \"rank\",\n        status: \"active\",\n        interval: \"1d\",\n      },\n    });\n    setLoading(false);\n    setResults(data);\n  };\n\n  return (\n    <div>\n      {loading ? (\n        <Loading text=\"loading\" />\n      ) : (\n        <Container>\n          <Crypto results={results} />\n        </Container>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// Semantic UI Components\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}